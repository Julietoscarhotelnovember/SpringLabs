[DI-개념_1]: 의존성 주입(의존 객체 주입) by 생성자
-NewRecordView 클래스가 NewRecord를 의존
-NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 주입
-두 클래스의 lifecyle이 동일
-복합연관

NewRecordView view=new NewRecordView(5,6,8);
-new NewRecord() 생성
-NewRecord record 생성된 객체의 주소값
result: 필요한 객체는 생성자를 통해 주입 가능
---------------------------------------------------
[DI-개념_2]: 의존성 주입(의존 객체 주입) by 함수(setter)
-NewRecordView 클래스가 필요로 하는 객체를 setter를 통해 주입
-객체의 생성이 독립적이고, 필요할 때만 객체를 주입
-두 객체의 lifecyle이 다르다
-집합연관
---------------------------------------------------
[DI-개념_3]: 의존성 주입(인터페이스 활용)
인터페이스: Recoard, RecordView

//setter를 통한 객체 주입 > 인터페이스 적용
	public void setRecord(Record record) {
		this.record = (NewRecord)record;
	}
---------------------------------------------------
시나리오
Class A, Class B
[A가 B를 사용하는 방법]
1.상속 (is-a) > Spring Framework에서는 별 관심이 없다...
2.포함(has-a)
	--생성자 사용: A의 생성자에서 B클래스를 생성하는 방법
	A a=new A();
	class A {
		B b;
		public A(){
			b=new B();
		}
	}
	--setter(함수) 사용
	class A {
		B b;
		public void setB(B b){
			this.b=b;
		}
	}
	class B {}
	A a=new A();
	B b=new B();
	a.setB(b);
result: Spring Framework는 다른 객체 참조(의존)하기 위해서 생성자, 함수 injection을 좋아한다
Spring 없이도 DI 가능, 스프링을 쓰면 좀 더 편하게 객체 생성, 조립을 할 수 있다.
---------------------------------------------------
1. Spring 사이트에서 다운(4.2.5 dist.zip)
2. 의존성 파일 (3.0.2 depenency.zip)
3. beans, context, core, expression jar 선택
4. xml파일(IOC(스프링 컨테이너) 안에 생성될 객체의 조립을 구성하는 파일)
IOC 컨테이너가 구성되고 나서 xml을 읽어 객체 생성
Inversion of Control? 제어의 역전?